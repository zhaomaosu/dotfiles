local fn = vim.fn

local install_path = fn.stdpath('data') .. '/site/pack/paqs/start/paq-nvim'

if fn.empty(fn.glob(install_path)) > 0 then
  fn.system({'git', 'clone', '--depth=1', 'https://github.com/savq/paq-nvim.git', install_path})
end

require("paq"):setup({
  verbose=true
}) {
  "navarasu/onedark.nvim",
  "scrooloose/nerdtree",
  "jackguo380/vim-lsp-cxx-highlight",
  "neovim/nvim-lspconfig",
  "hrsh7th/cmp-nvim-lsp",
  "hrsh7th/cmp-buffer",
  "hrsh7th/cmp-path",
  "hrsh7th/cmp-cmdline",
  "hrsh7th/nvim-cmp",
  "hrsh7th/cmp-vsnip",
  "hrsh7th/vim-vsnip",
  "windwp/nvim-autopairs",
  "nvim-lualine/lualine.nvim"
}

-- config onedark them
require('onedark').setup {
  style = 'darker',
}
require('onedark').load()

vim.cmd([[
hi LspCxxHlSymClass guifg=#aa4282
hi LspCxxHlSymMethod guifg=#a98927
hi LspCxxHlSymNamespace guifg=#5ba840
hi LspCxxHlSymStruct guifg=#dd7a86
hi LspCxxHlSymField guifg=#4dad92
hi LspCxxHlSymVariable guifg=#57c2cc
hi LspCxxHlSymParameter guifg=#337495
hi LspcxxHlSymFunction guifg=#6587cd
hi LspCxxHlSymEnumMember guifg=#e0caad
]])

-- config autopairs
require('nvim-autopairs').setup()

-- config lsp status line
local function LspStatus()
  if(not vim.tbl_isempty(vim.lsp.buf_get_clients(0)))
  then
    return "lsp online"
  end
  return 'lsp offline'
end

require('lualine').setup{
  options = {
    icons_enabled = false,
    component_separators = { left = ' ', right = ' '},
    section_separators = { left = ' ', right = ' '},
  },
  sections = {
    lualine_c = {'filename', LspStatus},
  },
}

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
end

-- Setup nvim-cmp.
local cmp = require'cmp'

cmp.setup({
  snippet = {
    -- REQUIRED - you must specify a snippet engine
    expand = function(args)
      vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
    end,
  },
  mapping = cmp.mapping.preset.insert({
    ['<C-b>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete(),
    ['<C-e>'] = cmp.mapping.abort(),
    ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm exp    licitly selected items.   
  }),
  sources = cmp.config.sources({
    { name = 'nvim_lsp' },
    { name = 'vsnip' }, -- For vsnip users.
    -- { name = 'luasnip' }, -- For luasnip users.
    -- { name = 'ultisnips' }, -- For ultisnips users.
    -- { name = 'snippy' }, -- For snippy users.
  }, {
    { name = 'buffer' },
    { name = 'path' },
  })
})

-- Use buffer source for `/` (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline('/', {
  mapping = cmp.mapping.preset.cmdline(),
  sources = {
    { name = 'buffer' }
  }
})

-- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline(':', {
  mapping = cmp.mapping.preset.cmdline(),
  sources = cmp.config.sources({
    { name = 'path' }
  }, {
    { name = 'cmdline' }
  })
})

-- Setup lspconfig.
local capabilities = require('cmp_nvim_lsp').default_capabilities()

-- ccls config
require'lspconfig'.ccls.setup {
  on_attach = on_attach,
  capabilities = capabilities,
  flags = {
    debounce_text_changes = 150;
  };
  init_options = {
    cache = {
      directory = ".ccls_cache";
    };
    highlight = {
      lsRanges = true;
    };
  };
}

vim.cmd([[au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif]])

-- general config for nvim
vim.cmd 'map <C-K> :py3f $HOME/.config/nvim/clang-format.py<cr>'
vim.cmd 'imap <C-K> <c-o>:py3f $HOME/.config/nvim/clang-format.py<cr>'

vim.o.completeopt = 'menu,menuone,noselect'
vim.o.termguicolors = true
vim.o.autoread = true
vim.o.cursorline = true
vim.o.syntax = 'on'
vim.o.mouse = 'a'
vim.o.autoindent = true
vim.o.cindent = true
vim.o.tabstop = 4
vim.o.softtabstop = 2
vim.o.shiftwidth = 2
vim.o.modelineexpr = true
vim.o.expandtab = true
vim.o.smarttab = true
vim.o.list = true
vim.o.number = true
vim.o.relativenumber = true
